- hosts: FreeBSD

  vars_files:
    - "vars/common.yml"
    - "vars/freebsd.yml"

  tasks:
    - name: Prudge | Add user
      user: name={{ prudge_user }}
            password={{ prudge_user_pwd }}
            shell={{ user_shell }}
            generate_ssh_key=yes

    - name: Prudge | Create app directory
      file: path={{ approot }} owner={{ prudge_user }} group={{ prudge_user }} mode=0755 recurse=yes state=directory
    - name: Prudge | Create shared config directory
      file: path={{ approot }}/shared/config owner={{ prudge_user }} group={{ prudge_user }} mode=0755 recurse=yes state=directory
    - name: Prudge | Create shared script directory
      file: path={{ approot }}/shared/script owner={{ prudge_user }} group={{ prudge_user }} mode=0755 recurse=yes state=directory

    - name: Git | Install
      pkgng: name=git state=present
      register: git_installed
    - name: Git | path
      command: which git
      when: git_installed|success
      register: git_binary_path

    # Postgresql database
    - name: Postgresql | Install
      pkgng: name=postgresql93-server state=present
      register: pg_installed

    - name: Postgresql | Contrib and python lib
      pkgng: name={{ item }} state=present
      with_items:
        - postgresql93-contrib
        - py27-psycopg2

    - name: Postgresql | Enable and start
      service: name=postgresql state=started enabled=yes

    - name: Postgresql | Initialize
      command: /usr/local/etc/rc.d/postgresql initdb creates=/usr/local/pgsql/data
      become: yes
      become_user: "root"
      when: pg_installed|success
      register: pg_initialized

    - name: Postgresql | Start
      command: /usr/local/etc/rc.d/postgresql start creates=/usr/local/pgsql/data/postmaster.pid
      become: yes
      become_user: "root"
      when: pg_initialized|success

    - name: Postgresql | Create user
      postgresql_user: name={{ prudge_user }} password={{ prudge_db_pass }} login_user={{ pgadmin_user }} db=postgres state=present
      become: yes
      become_user: "{{ pgadmin_user }}"

    - name: Postgresql | Create database
      postgresql_db: name={{ prudge_db }} owner={{ prudge_user }} login_user={{ pgadmin_user }} state=present
      become: yes
      become_user: "{{ pgadmin_user }}"

    - name: Postgresql | Update priviledges
      postgresql_privs: db={{ prudge_db }} role={{ prudge_user }} privs=ALL type=database login_user={{ pgadmin_user }}
      become: yes
      become_user: "{{ pgadmin_user }}"

    # Rbenv
    - name: Rbenv | Install required packages
      pkgng: name={{ item }} state=present
      with_items:
        - bash
        - autoconf
        - gmake
        - curl
        - libxml2
        - libxslt
        - node-devel
        - sqlite3
        - wget

    - name: Rbenv | Install
      become_user: "{{ prudge_user }}"
      become: yes
      git: repo=https://github.com/sstephenson/rbenv.git dest=~{{ prudge_user }}/.rbenv accept_hostkey=true update=no

    - name: Rbenv | Ensure fragments bash dir exists
      become_user: "{{ prudge_user }}"
      become: yes
      file: dest=~{{ prudge_user }}/.bash.d/ state=directory

    - name: Rbenv | Install rbenv bash file
      copy: src=files/rbenv.bash dest=~{{ prudge_user }}/.bash.d/rbenv.bash mode=700 owner={{ prudge_user }}

    - name: Rbenv | Source rbenv in .bash_profile
      become_user: "{{ prudge_user }}"
      become: yes
      lineinfile: dest=~{{ prudge_user }}/.bash_profile regexp="^source ~/\.bash\.d/rbenv\.bash" insertafter=EOF line="source ~/.bash.d/rbenv.bash" create=yes

    - name: Rbenv | Create plugin directory
      file: path=~{{ prudge_user }}/.rbenv/plugins/ owner={{ prudge_user }} group={{ prudge_user }} mode=0755 state=directory

    - name: Rbenv | Install ruby-build plugin
      become_user: "{{ prudge_user }}"
      become: yes
      git: repo=git://github.com/sstephenson/ruby-build.git dest=~{{ prudge_user }}/.rbenv/plugins/ruby-build accept_hostkey=true update=no

    - name: Rbenv | Get versions
      shell: bash -lc "rbenv versions" chdir=~{{ prudge_user }}
      register: rbenv_versions
      become_user: "{{ prudge_user }}"
      become: yes

    - name: Rbenv | Copy .gemrc
      copy: src=files/gemrc dest=~{{ prudge_user }}/.gemrc owner={{ prudge_user }} force=no

    - name: Rbenv | Install ruby
      shell: bash -lc "rbenv install {{ ruby_version }} && rbenv rehash" chdir=~{{ prudge_user }} creates=~{{ prudge_user }}/.rbenv/versions/{{ ruby_version }}
      become_user: "{{ prudge_user }}"
      become: yes
      when: rbenv_versions.stdout.find(ruby_version) == -1

    - name: Rbenv | Set global rbenv version
      shell: bash -lc "rbenv global {{ ruby_version }}" chdir=~{{ prudge_user }}
      become_user: "{{ prudge_user }}"
      become: yes

    - name: Rbenv | Install bundler
      shell: bash -lc "rbenv local {{ ruby_version }} && (gem query --installed --name bundler || gem install bundler)" chdir=~{{ prudge_user }}
      become_user: "{{ prudge_user }}"
      become: yes

    # Nginx
    - name: Nginx | Install
      pkgng: name=nginx state=present
      register: nginxinstalled
      notify:
        - Start Nginx

    - name: Nginx | sites-available
      when: nginxinstalled|success
      file: path={{ nginx_config_root }}/sites-available owner=root group=wheel mode=0755 state=directory

    - name: Nginx | sites-enabled
      when: nginxinstalled|success
      file: path={{ nginx_config_root }}/sites-enabled owner=root group=wheel mode=0755 state=directory

    - name: Add Site Config
      when: nginxinstalled|success
      register: prudgestcfg
      template: src=templates/web/nginx.conf.j2 dest={{ nginx_config_root }}/sites-available/prudge.conf owner=root group=wheel

    - name: Enable Site Config
      when: prudgestcfg|success
      file: src={{ nginx_config_root }}/sites-available/prudge.conf dest={{ nginx_config_root }}/sites-enabled/prudge.conf state=link
      register: prudgestcfgen

    - name: Inject Site Config
      when: prudgestcfgen|success
      lineinfile: dest={{ nginx_config_root }}/nginx.conf regexp=sites-enabled line='  include {{ nginx_config_root }}/sites-enabled/*;' insertbefore="^\}"
      register: nginx_site_enable

    # Safeexec
    - name: Safeexec | required packages
      pkgng: name={{ item }} state=present
      with_items:
        - cmake
    - name: Safeexec | checkout source
      git: repo=https://github.com/ochko/safeexec.git dest=~/safeexec accept_hostkey=yes update=no
    - name: Safeexec | cmake
      command: cmake . chdir=~/safeexec creates=~/safeexec/Makefile
    - name: Safeexec | make
      command: make chdir=~/safeexec creates=~/safeexec/safeexec
    - name: Safeexec | install
      command: make install chdir=~/safeexec creates=/usr/local/bin/safeexec
      become_user: "root"
      become: yes
    - name: Safeexec | save path
      command: which safeexec
      register: safeexec_binary_path


    # Nodejs is for rails assets compiling
    - name: Install nodejs
      pkgng: name=node state=present
    # Memcache for rails cache
    - name: Install memcached
      pkgng: name=memcached state=present
    # Redis for resque workers
    - name: Install redis
      pkgng: name=redis state=present
    # Sphinx for fulltext search
    - name: Sphinxsearch | Dependencies
      pkgng: name={{ item }} state=present
      with_items:
        - mysql56-client
        - mysql56-server

    - name: Sphinxsearch | Install
      pkgng: name=sphinxsearch state=present

    - name: Sphinxsearch | searchd path
      command: which searchd
      register: searchd_binary_path

    - name: Sphinxsearch | indexer path
      command: which indexer
      register: indexer_binary_path

    - name: Sphinxsearch | Config
      template: src=templates/config/sphinx.yml.j2 dest={{ approot }}/shared/config/sphinx.yml owner={{ prudge_user }} group={{ prudge_user }} mode=0640

    - name: Unicorn | Config
      template: src=templates/config/unicorn.rb.j2 dest={{ approot }}/shared/config/unicorn.rb owner={{ prudge_user }} group={{ prudge_user }} mode=0644
      register: unicorn_configured
    - name: Unicorn | Script
      template: src=templates/script/unicorn.j2 dest={{ approot }}/shared/script/unicorn owner={{ prudge_user }} group={{ prudge_user }} mode=0750
      when: unicorn_configured|success

    - name: Resque | Script
      template: src=templates/script/resque.j2 dest={{ approot }}/shared/script/resque owner={{ prudge_user }} group={{ prudge_user }} mode=0750

    - name: Sphinx | Script
      template: src=templates/script/sphinx.j2 dest={{ approot }}/shared/script/sphinx owner={{ prudge_user }} group={{ prudge_user }} mode=0750

    - name: Monit | Install
      pkgng: name=monit state=present
      register: monit_installed

    - name: Monit | true binary path
      command: which true
      register: true_binary_path

    - name: Monit | Config
      when: monit_installed|success
      register: monitcfg
      template: src=templates/config/monitrc.j2 dest={{ approot }}/shared/config/monitrc owner={{ prudge_user }} group={{ prudge_user }} mode=0600

    - name: Binaries | diff path
      command: which diff
      register: diff_binary_path

    - name: Binaries | Config
      when: monit_installed|success
      template: src=templates/config/binaries.yml.j2 dest={{ approot }}/shared/config/binaries.yml owner={{ prudge_user }} group={{ prudge_user }} mode=0640

    - name: Database | Config
      template: src=templates/config/database.yml.j2 dest={{ approot }}/shared/config/database.yml owner={{ prudge_user }} group={{ prudge_user }} mode=0640

    - name: Mail | Sendmail binary path
      command: which sendmail
      when: mail_delivery == 'sendmail'
      register: sendmail_binary_path

    - name: Mail | Config
      template: src=templates/config/mail.yml.j2 dest={{ approot }}/shared/config/mail.yml owner={{ prudge_user }} group={{ prudge_user }} mode=0640

    - name: Config | Copy templates
      copy: src=templates/config/{{ item }} dest={{ approot }}/shared/config/ owner={{ prudge_user }} group={{ prudge_user }} mode=0640
      with_items:
        - config.yml
        - languages.yml
        - resque.yml
        - settings.yml
        - twitter.yml

    - name: Ensure Postgresql started/enabled
      service: name=postgresql state=started enabled=yes

    - name: Ensure Memcached started/enabled
      service: name=memcached state=started enabled=yes

    - name: Ensure Redis started/enabled
      service: name=redis state=started enabled=yes

    - name: Ensure Nginx started/enabled
      service: name=nginx state=started enabled=yes

    - name: Ensure Nginx reload
      service: name=nginx state=reloaded
      when: nginx_site_enable|success
